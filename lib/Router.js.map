{"version":3,"sources":["../src/Router.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;IAeM,M;AAEF,sBAAc;AAAA;;AACV,aAAK,QAAL,GAAgB,uBAAa,IAAb,CAAhB;AACA,aAAK,OAAL,GAAe,IAAI,iBAAO,YAAX,EAAf;AACA,aAAK,YAAL,GAAoB,YAApB;AACH;;;;oCAEW,C,EAAG;;AAEX,gBAAI,OAAQ,OAAO,QAAP,CAAgB,IAAjB,GACP,OAAO,QAAP,CAAgB,IAAhB,CAAqB,OAArB,CAA6B,IAA7B,EAAmC,GAAnC,EACJ,OADI,CACI,OADJ,EACa,GADb,EAEJ,KAFI,CAEE,GAFF,CADO,GAGC,GAHZ;;AAKA,iBAAK,QAAL,CAAc,GAAd,CAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,KAAW,IAAtC;AAEH;;;6BAEI;;AAED,iBAAK,OAAL,CAAa,EAAb,CAAgB,KAAhB,CAAsB,KAAK,OAA3B,EAAoC,SAApC;AACA,mBAAO,IAAP;AAEH;;;+BAEM;;AAEH,iBAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB,CAAwB,KAAK,OAA7B,EAAsC,SAAtC;AACA,mBAAO,IAAP;AAEH;;;+BAEM;;AAEH,iBAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB,CAAwB,KAAK,OAA7B,EAAsC,SAAtC;AACA,mBAAO,IAAP;AAEH;;;;;;;;;;4BAOG,I,EAAM,E,EAAI;;AAEV,iBAAK,QAAL,CAAc,QAAd,CAAuB,IAAvB,EAA8B,QAAO,EAAP,yCAAO,EAAP,OAAc,QAAf,GACzB,GAAG,QAAH,CAAY,IAAZ,CAAiB,EAAjB,CADyB,GACF,EAD3B;AAEA,mBAAO,IAAP;AAEH;;;;;;;;;4BAMG,E,EAAI;;AAEJ,iBAAK,QAAL,CAAc,QAAd,CAAuB,IAAvB,EAA8B,QAAO,EAAP,yCAAO,EAAP,OAAc,QAAf,GACzB,GAAG,QAAH,CAAY,IAAZ,CAAiB,EAAjB,CADyB,GACF,EAD3B;AAGH;;;;;;kBAGU,M","file":"Router.js","sourcesContent":["import Route from './Route';\nimport Registry from './Registry';\nimport events from 'events';\n\n/**\n * Called when a Route has been activated.\n * @callback handler\n * @param {Request} req \n * @param {Response} res \n * @param {function} next\n */\n\n/**\n * Router provides an api for executing code when the browser hash changes.\n * It does this by listening for a 'hashchange' event. Add an instance\n * of Router with `window.addEventListener` to get to work.\n */\nclass Router {\n\n    constructor() {\n        this.registry = new Registry(this);\n        this._events = new events.EventEmitter();\n        this.HASH_CHANGED = 'hashchange';\n    }\n\n    handleEvent(e) {\n\n        var hash = (window.location.hash) ?\n            window.location.hash.replace(/^#/, '/').\n        replace(/\\/\\//g, '/').\n        split('?'): '/';\n\n        this.registry.run(hash[0], hash[1] || null);\n\n    }\n\n    on() {\n\n        this._events.on.apply(this._events, arguments);\n        return this;\n\n    }\n\n    once() {\n\n        this._events.once.apply(this._events, arguments);\n        return this;\n\n    }\n\n    emit() {\n\n        this._events.emit.apply(this._events, arguments);\n        return this;\n\n    }\n\n    /**\n     * get queues up a route to be executed.\n     * @param {string|Regexp} path The path to activate the handler on\n     * @param {handler} cb\n     */\n    get(path, cb) {\n\n        this.registry.register(path, (typeof cb === 'object') ?\n            cb.onActive.bind(cb) : cb);\n        return this;\n\n    }\n\n    /**\n     * use sets up middleware for all routes\n     * @param {handler} cb \n     */\n    use(cb) {\n\n        this.registry.register(null, (typeof cb === 'object') ?\n            cb.onActive.bind(cb) : cb);\n\n    }\n\n}\nexport default Router\n"]}