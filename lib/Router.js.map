{"version":3,"sources":["../src/Router.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;IAeM,M;AAEJ,oBAAyB;AAAA,QAAb,MAAa,yDAAN,IAAM;;AAAA;;AAEvB,SAAK,QAAL,GAAgB,uBAAa,IAAb,CAAhB;AACA,SAAK,OAAL,GAAe,IAAI,iBAAO,YAAX,EAAf;AACA,SAAK,YAAL,GAAoB,YAApB;;AAEA,QAAG,UAAU,IAAb,EACE,OAAO,gBAAP,CAAwB,KAAK,YAA7B,EAA2C,IAA3C;AAEH;;;;gCAEW,C,EAAG;;AAEb,UAAI,OAAQ,OAAO,QAAP,CAAgB,IAAjB,GACT,OAAO,QAAP,CAAgB,IAAhB,CAAqB,OAArB,CAA6B,IAA7B,EAAmC,GAAnC,EACF,OADE,CACM,OADN,EACe,GADf,EAEF,KAFE,CAEI,GAFJ,CADS,GAGC,GAHZ;;AAKA,WAAK,QAAL,CAAc,GAAd,CAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,KAAW,IAAtC;AAED;;;yBAEI;;AAEH,WAAK,OAAL,CAAa,EAAb,CAAgB,KAAhB,CAAsB,KAAK,OAA3B,EAAoC,SAApC;AACA,aAAO,IAAP;AAED;;;2BAEM;;AAEL,WAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB,CAAwB,KAAK,OAA7B,EAAsC,SAAtC;AACA,aAAO,IAAP;AAED;;;2BAEM;;AAEL,WAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB,CAAwB,KAAK,OAA7B,EAAsC,SAAtC;AACA,aAAO,IAAP;AAED;;;;;;;;;;wBAOG,I,EAAM,E,EAAI;;AAEZ,WAAK,QAAL,CAAc,QAAd,CAAuB,IAAvB,EAA8B,QAAO,EAAP,yCAAO,EAAP,OAAc,QAAf,GAC3B,GAAG,QAAH,CAAY,IAAZ,CAAiB,EAAjB,CAD2B,GACJ,EADzB;AAEA,aAAO,IAAP;AAED;;;;;;;;;wBAMG,E,EAAI;;AAEN,WAAK,QAAL,CAAc,QAAd,CAAuB,IAAvB,EAA8B,QAAO,EAAP,yCAAO,EAAP,OAAc,QAAf,GAC3B,GAAG,QAAH,CAAY,IAAZ,CAAiB,EAAjB,CAD2B,GACJ,EADzB;;AAGA,aAAO,IAAP;AAED;;;;;;kBAGY,M","file":"Router.js","sourcesContent":["import Route from './Route';\nimport Registry from './Registry';\nimport events from 'events';\n\n/**\n * Called when a Route has been activated.\n * @callback handler\n * @param {Request} req\n * @param {Response} res\n * @param {function} next\n */\n\n/**\n * Router provides an api for executing code when the browser hash changes.\n * It does this by listening for a 'hashchange' event. Add an instance\n * of Router with `window.addEventListener` to get to work.\n */\nclass Router {\n\n  constructor(window=null) {\n\n    this.registry = new Registry(this);\n    this._events = new events.EventEmitter();\n    this.HASH_CHANGED = 'hashchange';\n\n    if(window != null)\n      window.addEventListener(this.HASH_CHANGED, this);\n\n  }\n\n  handleEvent(e) {\n\n    var hash = (window.location.hash) ?\n      window.location.hash.replace(/^#/, '/').\n    replace(/\\/\\//g, '/').\n    split('?'): '/';\n\n    this.registry.run(hash[0], hash[1] || null);\n\n  }\n\n  on() {\n\n    this._events.on.apply(this._events, arguments);\n    return this;\n\n  }\n\n  once() {\n\n    this._events.once.apply(this._events, arguments);\n    return this;\n\n  }\n\n  emit() {\n\n    this._events.emit.apply(this._events, arguments);\n    return this;\n\n  }\n\n  /**\n   * get queues up a route to be executed.\n   * @param {string|Regexp} path The path to activate the handler on\n   * @param {handler} cb\n   */\n  get(path, cb) {\n\n    this.registry.register(path, (typeof cb === 'object') ?\n      cb.onActive.bind(cb) : cb);\n    return this;\n\n  }\n\n  /**\n   * use sets up middleware for all routes\n   * @param {handler} cb\n   */\n  use(cb) {\n\n    this.registry.register(null, (typeof cb === 'object') ?\n      cb.onActive.bind(cb) : cb);\n\n    return this;\n\n  }\n\n}\nexport default Router\n\n"]}