{"version":3,"sources":["../src/Registry.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;IAQM,Q;AAEF,sBAAY,MAAZ,EAAoB;AAAA;;AAChB,aAAK,MAAL,GAAc,EAAd;AACA,aAAK,OAAL,GAAe,MAAf;AACH;;;;;;;;;;;;8BAQK,G,EAAK,I,EAAM;AACb,mBAAO,4BAAW,GAAX,EAAgB,IAAhB,CAAP;AACH;;;;;;;;;;;iCAQQ,I,EAAM,E,EAAI;;AAEf,gBAAI,OAAO,EAAX;;AAEA,gBAAI,SAAS,IAAb,EACI,OAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,uBAAa,EAAb,CAAjB,CAAP;;AAEJ,iBAAK,MAAL,CAAY,IAAZ,CAAiB,oBAAU,KAAK,KAAL,CAAW,IAAX,EAAiB,IAAjB,CAAV,EAAkC,IAAlC,EAAwC,EAAxC,CAAjB;AAEH;;;;;;;;;;4BAOG,I,EAAM,K,EAAO;AAAA;;AAEb,gBAAI,UAAU,KAAK,MAAL,CAAY,KAAZ,EAAd;AACA,gBAAI,KAAJ;;AAEA,oBAAO,mBAAO;;AAEV,oBAAI,GAAJ,EAAS,OAAO,MAAK,OAAL,CAAa,IAAb,CAAkB,OAAlB,EAA2B,GAA3B,CAAP;;AAET,oBAAI,QAAQ,MAAR,KAAmB,CAAvB,EACI,QAAQ,KAAR,GAAgB,QAAhB,CAAyB,IAAzB,EAA+B,KAA/B,EAAsC,KAAtC,EAA4C,MAAK,OAAjD;AAEP,aAPD;;AASA,mBAAO,OAAP;AAEH;;;;;;kBAIU,Q","file":"Registry.js","sourcesContent":["import mukalukoxs from 'path-to-regexp';\nimport Route from './Route';\nimport HotRoute from './HotRoute';\n\n/**\n * Registry for Routes\n * @param {Router} router The main router\n *\n * @property {array<Route>} routes - A list of all the routes registered here.\n */\nclass Registry {\n\n    constructor(router) {\n        this.routes = [];\n        this._router = router;\n    }\n\n    /**\n     * regex produces a RegExp object from a path string\n     * @param {string} str \n     * @param {array} keys An array that stores information regarding ':var' parameters in the path.\n     * @return {RegExp} description\n     */\n    regex(str, keys) {\n        return mukalukoxs(str, keys);\n    }\n\n    /**\n     * register a handler for a route\n     * If the path has a Route already registered for its id, no new object is created.\n     * @param {string} path \n     * @param {handler} cb \n     */\n    register(path, cb) {\n\n        var keys = [];\n\n        if (path === null)\n            return this.routes.push(new HotRoute(cb));\n\n        this.routes.push(new Route(this.regex(path, keys), keys, cb));\n\n    }\n\n    /**\n     * run attempts to activate the routes stored in the registry\n     * @param {string} path \n     * @param {string} query \n     */\n    run(path, query) {\n\n        var pending = this.routes.slice();\n        var next;\n\n        next = err => {\n\n            if (err) return this._router.emit('error', err);\n\n            if (pending.length !== 0)\n                pending.shift().activate(path, query, next, this._router);\n\n        };\n\n        return next();\n\n    }\n\n}\n\nexport default Registry\n"]}